//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
//  <auto-generated>
//     This code was generated by NetSqlAzMan CodeDom.
//     NetSqlAzMan - Andrea Ferendeles - http://netsqlazman.codeplex.com
//     NetSqlAzMan Version: 3.6.0.15
//     CLR Version: v4.0.30319
//     <NetSqlAzMan-info>
//        Store: ClearOffice
//        Application: Hrm
//        Last update: 4/10/2012 11:01:21 AM
//     </NetSqlAzMan-info>
//  </auto-generated>
// ------------------------------------------------------------------------------
// 
// 
// TODO: Add NetSqlAzMan.dll Assembly reference.
// 
// 
namespace ClearOffice.Security
{
    using System;
    using System.Security.Principal;
    using System.Collections.Generic;
    using System.Text;
    using NetSqlAzMan;
    using NetSqlAzMan.Interfaces;

    /// <summary>
    /// NetSqlAzMan Check Access Helper Class for NetSqlAzMan 'Hrm' Application 
    /// </summary>
    public partial class HRMPermissionHelper
    {  
  
        #region Enums
        /// <summary>
        /// Roles Enumeration
        /// </summary>
        public enum Role
        {
            /// <summary>
            /// Role HRMManager
            /// </summary>
            HRMManager,
            /// <summary>
            /// Role Personnel
            /// </summary>
            Personnel,

            /// <summary>
            /// Role TrainingCoordinator
            /// </summary>
            TrainingCoordinator,
            /// <summary>
            /// Role TrainingManager
            /// </summary>
            TrainingManager,
        }
        /// <summary>
        /// Tasks Enumeration
        /// </summary>
        public enum Task
        {
            /// <summary>
            /// Task Delete
            /// </summary>
            Delete,
            /// <summary>
            /// Task Insert
            /// </summary>
            Insert,
            /// <summary>
            /// Task LoadModule
            /// </summary>
            LoadModule,
            /// <summary>
            /// Task ManageLeaveSetting
            /// </summary>
            ManageLeaveSetting,
            /// <summary>
            /// Task Update
            /// </summary>
            Update,
            /// <summary>
            /// Task ViewReport
            /// </summary>
            ViewReport,
        }
        /// <summary>
        /// Operations Enumeration
        /// </summary>
         public enum Operation
        {
            /// <summary>
            /// Operation AddEmployee
            /// </summary>
            AddEmployee,
            /// <summary>
            /// Operation AddLeaveRequest
            /// </summary>
            AddLeaveRequest,
            /// <summary>
            /// Operation AddLookupItem
            /// </summary>
            AddLookupItem,
            /// <summary>
            /// Operation AddOrganizationHierarchy
            /// </summary>
            AddOrganizationHierarchy,
            /// <summary>
            /// Operation AddPosition
            /// </summary>
            AddPosition,
            /// <summary>
            /// Operation AddTrainingAttendee
            /// </summary>
            AddTrainingAttendee,
            /// <summary>
            /// Operation AddTrainingFeedback
            /// </summary>
            AddTrainingFeedback,
            /// <summary>
            /// Operation AddTrainingRequest
            /// </summary>
            AddTrainingRequest,
            /// <summary>
            /// Operation ApproveLeaveRequest
            /// </summary>
            ApproveLeaveRequest,
            /// <summary>
            /// Operation ApproveTraining
            /// </summary>
            ApproveTraining,
            /// <summary>
            /// Operation ArchiveEmployee
            /// </summary>
            ArchiveEmployee,
            /// <summary>
            /// Operation ConfigureIntialLeave
            /// </summary>
            ConfigureIntialLeave,
            /// <summary>
            /// Operation DeleteEmployee
            /// </summary>
            DeleteEmployee,
            /// <summary>
            /// Operation DeleteLeaveRequest
            /// </summary>
            DeleteLeaveRequest,
            /// <summary>
            /// Operation DeletePosition
            /// </summary>
            DeletePosition,
            /// <summary>
            /// Operation DeleteTrainingRequest
            /// </summary>
            DeleteTrainingRequest,
            /// <summary>
            /// Operation PromoteEmployee
            /// </summary>
            PromoteEmployee,
            /// <summary>
            /// Operation TerminateEmployee
            /// </summary>
            TerminateEmployee,
            /// <summary>
            /// Operation TransferEmployee
            /// </summary>
            TransferEmployee,
            /// <summary>
            /// Operation UpdateEmployee
            /// </summary>
            UpdateEmployee,
            /// <summary>
            /// Operation UpdatePosition
            /// </summary>
            UpdatePosition,
            /// <summary>
            /// Operation UpdateTraining
            /// </summary>
            UpdateTraining,
            /// <summary>
            /// Operation ViewEmployeeList
            /// </summary>
            ViewEmployeeList,
            /// <summary>
            /// Operation ViewLeaveStatus
            /// </summary>
            ViewLeaveStatus,
            /// <summary>
            /// Operation ViewTrainingList
            /// </summary>
            ViewTrainingList,
            /// <summary>
            /// Operation WarnEmployee
            /// </summary>
            WarnEmployee,
            /// <summary>
            /// Operation ViewOrganizationList
            /// </summary>
            ViewOrganizationList,
            /// <summary>
            /// Operation CalculateLeave
            /// </summary>
            CalculateLeave,
           
        }
        #endregion
    /// <summary>
        /// Retrieve Item name from a Role Enum.
        /// </summary>
        /// <param name="role">The role.</param>
        /// <returns>The Role Name.</returns>
        public virtual string ItemName(Role role)
        {
            if ((role == Role.HRMManager))
            {
                return "HRMManager";
            }
            if ((role == Role.Personnel))
            {
                return "Personnel";
            }
            if ((role == Role.TrainingCoordinator))
            {
                return "TrainingCoordinator";
            }
            if ((role == Role.TrainingManager))
            {
                return "TrainingManager";
            }
            throw new System.ArgumentException("Unknown Role name", "role");
        }
        /// <summary>
        /// Retrieve Item name from a Task Enum.
        /// </summary>
        /// <param name="task">The task.</param>
        /// <returns>The Task Name.</returns>
        public virtual string ItemName(Task task)
        {
            if ((task == Task.Delete))
            {
                return "Delete";
            }
            if ((task == Task.Insert))
            {
                return "Insert";
            }
            if ((task == Task.LoadModule))
            {
                return "LoadModule";
            }
            if ((task == Task.Update))
            {
                return "Update";
            }
            if ((task == Task.ViewReport))
            {
                return "ViewReport";
            }
            if ((task == Task.ManageLeaveSetting))
            {
                return "ManageLeaveSetting";
            }
            throw new System.ArgumentException("Unknown Task name", "task");
        }
        /// <summary>
        /// Retrieve Item name from a Operation Enum.
        /// </summary>
        /// <param name="operation">The operation.</param>
        /// <returns>The Operation Name.</returns>
        public virtual string ItemName(Operation operation)
        {
            if ((operation == Operation.AddEmployee))
            {
                return "AddEmployee";
            }
            if ((operation == Operation.AddLeaveRequest))
            {
                return "AddLeaveRequest";
            }
            if ((operation == Operation.AddLookupItem))
            {
                return "AddLookupItem";
            }
            if ((operation == Operation.AddOrganizationHierarchy))
            {
                return "AddOrganizationHierarchy";
            }
            if ((operation == Operation.AddPosition))
            {
                return "AddPosition";
            }
            if ((operation == Operation.AddTrainingAttendee))
            {
                return "AddTrainingAttendee";
            }
            if ((operation == Operation.AddTrainingFeedback))
            {
                return "AddTrainingFeedback";
            }
            if ((operation == Operation.AddTrainingRequest))
            {
                return "AddTrainingRequest";
            }
            if ((operation == Operation.ApproveLeaveRequest))
            {
                return "ApproveLeaveRequest";
            }
            if ((operation == Operation.ApproveTraining))
            {
                return "ApproveTraining";
            }
            if ((operation == Operation.ArchiveEmployee))
            {
                return "ArchiveEmployee";
            }
            if ((operation == Operation.CalculateLeave))
            {
                return "CalculateLeave";
            }
            if ((operation == Operation.ConfigureIntialLeave))
            {
                return "ConfigureIntialLeave";
            }
            if ((operation == Operation.DeleteEmployee))
            {
                return "DeleteEmployee";
            }
            if ((operation == Operation.DeleteLeaveRequest))
            {
                return "DeleteLeaveRequest";
            }
            if ((operation == Operation.DeletePosition))
            {
                return "DeletePosition";
            }
            if ((operation == Operation.DeleteTrainingRequest))
            {
                return "DeleteTrainingRequest";
            }
            if ((operation == Operation.PromoteEmployee))
            {
                return "PromoteEmployee";
            }
            if ((operation == Operation.TerminateEmployee))
            {
                return "TerminateEmployee";
            }
            if ((operation == Operation.TransferEmployee))
            {
                return "TransferEmployee";
            }
            if ((operation == Operation.UpdateEmployee))
            {
                return "UpdateEmployee";
            }
            if ((operation == Operation.UpdatePosition))
            {
                return "UpdatePosition";
            }
            if ((operation == Operation.UpdateTraining))
            {
                return "UpdateTraining";
            }
            if ((operation == Operation.ViewEmployeeList))
            {
                return "ViewEmployeeList";
            }
            if ((operation == Operation.ViewLeaveStatus))
            {
                return "ViewLeaveStatus";
            }
            if ((operation == Operation.ViewTrainingList))
            {
                return "ViewTrainingList";
            }
            if ((operation == Operation.ViewOrganizationList))
            {
                return "ViewOrganizationList";
            }
            if ((operation == Operation.WarnEmployee))
            {
                return "WarnEmployee";
            }
            throw new System.ArgumentException("Unknown Operation name", "operation");
        }
    }
 }

