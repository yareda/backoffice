//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
//  <auto-generated>
//     This code was generated by NetSqlAzMan CodeDom.
//     NetSqlAzMan - Andrea Ferendeles - http://netsqlazman.codeplex.com
//     NetSqlAzMan Version: 3.6.0.15
//     CLR Version: v4.0.30319
//     <NetSqlAzMan-info>
//        Store: ClearOffice
//        Application: FixedAsset
//        Last update: 6/4/2012 11:20:16 ጡዋት
//     </NetSqlAzMan-info>
//  </auto-generated>
// ------------------------------------------------------------------------------
// 
// 
// TODO: Add NetSqlAzMan.dll Assembly reference.
// 
// 
namespace ClearOffice.Security
{
 public partial class AdministrationPermissionHelper
    {
         /// <summary>
        /// Retrieve Item name from a Role Enum.
        /// </summary>
        /// <param name="task">The task.</param>
        /// <returns>The Task Name.</returns>
        public virtual string ItemName(Role role)
        {
            if ((role == Role.SystemAdmin))
            {
                return "SystemAdmin";
            }
            throw new System.ArgumentException("Unknown Role name", "role");
        }
        /// <summary>
        /// Retrieve Item name from a Task Enum.
        /// </summary>
        /// <param name="task">The task.</param>
        /// <returns>The Task Name.</returns>
        public virtual string ItemName(Task task)
        {
            if ((task == Task.ManageUsers))
            {
                return "ManageUsers";
            }
            if ((task == Task.LoadModule))
            {
                return "LoadModule";
            }
            throw new System.ArgumentException("Unknown Task name", "task");
        }
        /// <summary>
        /// Retrieve Item name from a Operation Enum.
        /// </summary>
        /// <param name="operation">The operation.</param>
        /// <returns>The Operation Name.</returns>
        public virtual string ItemName(Operation operation)
        {
            if ((operation == Operation.AddNewUser))
            {
                return "AddNewUser";
            }
            if ((operation == Operation.DisableUser))
            {
                return "DisableUser";
            }
            if ((operation == Operation.SetUserPassword))
            {
                return "SetUserPassword";
            }
            if ((operation == Operation.ViewUserList))
            {
                return "ViewUserList";
            }
            if ((operation == Operation.ChangePassword))
            {
                return "ChangePassword";
            }
            throw new System.ArgumentException("Unknown Operation name", "operation");
        }

        #region Enums
        /// <summary>
        /// Roles Enumeration
        /// </summary>
        public enum Role
        {
            /// <summary>
            /// Role SystemAdmin
            /// </summary>
            SystemAdmin,
        }
        /// <summary>
        /// Tasks Enumeration
        /// </summary>
        public enum Task
        {
            /// <summary>
            /// Task ManageUsers
            /// </summary>
            ManageUsers,
            /// <summary>
            /// Task LoadModule
            /// </summary>
            LoadModule,
        }
        /// <summary>
        /// Operations Enumeration
        /// </summary>
        public enum Operation
        {
            /// <summary>
            /// Operation AddNewUser
            /// </summary>
            AddNewUser,
            /// <summary>
            /// Operation DisableUser
            /// </summary>
            DisableUser,
            /// <summary>
            /// Operation SetUserPassword
            /// </summary>
            SetUserPassword,
            /// <summary>
            /// Operation ChangePassword
            /// </summary>
            ChangePassword,
            /// <summary>
            /// Operation ViewUserList
            /// </summary>
            ViewUserList,
        }
        #endregion
    }
}
